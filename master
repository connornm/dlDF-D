#!/usr/bin/env python
import sys
sys.path.append('praxis/')
from praxis import praxis
import lib, os, pdb
tolerance = 0.03
max_step = 1
from numpy import log, exp
global hart
hart = 627.51 #Hartree to kcal/mol conversion factor

# Write to the output
def w(s):
	os.system("echo '"+s+"' >> output")	

def get_error(dat):
	error = 0
	verbose = False
	E_mon = hart*dat.vals['mon']['gaussian']['energy']
	for system in dat.meta['dimer']:
		E_dim = hart*dat.vals[system]['gaussian']['energy']
		E_disp = dat.vals[system]['disp']['energy']
		E_sapt = dat.vals[system]['sapt']['energy']
		dE = E_dim-2*E_mon+E_disp
		er = ((E_sapt-dE)/(E_sapt))**2
		w('All energies in kcal/mol')
		w('E_dim='+str(E_dim))
		w('E_mon='+str(E_mon))
		w('E_disp='+str(E_disp))		
		w('E_sapt='+str(E_sapt))	
		w('E_dim-E_A-E_B='+str(dE))
		w('er='+str(er))
		w(' ')
		error += er
	return error

def print_param(param, error):
	w(' ')
	w('Total Error: '+str(error))
	w('Parameters:')
	for i in range(len(param)):
		w(str(param[i])+',')
	w('--------------------------------------------')
	w(' ')

global data
#lib.new_list('CH4', 100)
data = lib.data()
data.meta['dimer']={'CH4_dimer00100'}
for dim in data.meta['dimer']:
	data.meta['system'].add(dim)
data.split('xyz', 'xyz', 9, 'CH4_dimer00100', 'mon', 'mon')
data.convert('xyz', 'gaussian')
data.convert('gaussian', 'disp_dimer')
data.get('energy', 'disp')
data.get('energy', 'sapt')
data.get('distance', 'sapt')
os.system('echo $(date) > output')
# Main loop called by praxis with input parameters to be optimized
def loop(param, dummy):

	cutoff = 0.04
	global data
	global hart

	paramx=[param[0],1.0,param[1],0.0,0.0,0.0,1.0,param[2],param[3],param[4],param[5]]
	paramcp= [1.0,param[6],param[7],0.0,0.0,param[8]]
	paramcap=[1.0,param[9],param[10],0.0,0.0]

	lib.save_array(paramx, 'data/dat/param/ParamM05X.dat')
	lib.save_array(paramcp, 'data/dat/param/ParamM05CP.dat')
	lib.save_array(paramcap, 'data/dat/param/ParamM05CAP.dat')
	
	data.wait()
	data.run('gaussian')
	data.wait()
	data.get('energy', 'gaussian')
	data.iteration += 1
	error = get_error(data)
	print_param(parm, error)	
	if True:
		sys.exit()
	
	return error 

# Initial parameters
paradict = {
 0 : 0.00118328602,
 1 : 4.58671865512,
 2 : -0.143287030854,
 3 : -0.0470989967546,
 4 : -0.405760074055,
 5 : 0.0648415072706,
 6 : 4.32613300189,
 7 : -10.7515744045,
 8 : 0.599485542764,
 9 : -2.40178165311,
 10 : 1.92115316339
}	

param = []

for i in range(11):
	param += [paradict[i]]

output=praxis(tolerance, max_step, 11, 4, param, loop)
print(output)

